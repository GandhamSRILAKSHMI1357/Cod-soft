{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMh44PC35oGrfbu8BkUE2oi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GandhamSRILAKSHMI1357/Cod-soft/blob/main/task2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R8kZz7lc80T1",
        "outputId": "03d3b616-eef0-40bc-fdc1-8054473b274c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. Loading Data...\n",
            "Original Data Head:\n",
            "     title            genre    director   actor1   actor2  rating\n",
            "0  Movie A  Action|Thriller  Director X  Actor P  Actor Q     7.5\n",
            "1  Movie B   Comedy|Romance  Director Y  Actor Q  Actor R     8.2\n",
            "2  Movie C            Drama  Director X  Actor R  Actor S     6.9\n",
            "3  Movie D    Action|Sci-Fi  Director Z  Actor P  Actor T     9.1\n",
            "4  Movie E           Comedy  Director Y  Actor Q  Actor U     7.8\n",
            "--------------------------------------------------\n",
            "2. Preprocessing Data and Feature Engineering...\n",
            "Processed Data Head (Features and Target):\n",
            "   Action  Comedy  Drama  Family  Romance  Sci-Fi  Thriller  director_encoded  \\\n",
            "0       1       0      0       0        0       0         1                 2   \n",
            "1       0       1      0       0        1       0         0                 3   \n",
            "2       0       0      1       0        0       0         0                 2   \n",
            "3       1       0      0       0        0       1         0                 4   \n",
            "4       0       1      0       0        0       0         0                 3   \n",
            "\n",
            "   actor1_encoded  actor2_encoded  \n",
            "0               0               1  \n",
            "1               1               2  \n",
            "2               2               3  \n",
            "3               0               4  \n",
            "4               1               5  \n",
            "0    7.5\n",
            "1    8.2\n",
            "2    6.9\n",
            "3    9.1\n",
            "4    7.8\n",
            "Name: rating, dtype: float64\n",
            "--------------------------------------------------\n",
            "3. Splitting Data into Training and Testing Sets...\n",
            "Training features shape: (8, 10)\n",
            "Testing features shape: (2, 10)\n",
            "--------------------------------------------------\n",
            "4. Scaling Features (if necessary)...\n",
            "Scaled Training Features Head:\n",
            "     Action    Comedy     Drama    Family   Romance    Sci-Fi  Thriller  \\\n",
            "0 -0.577350 -0.577350  1.732051 -0.377964  2.645751 -0.577350 -0.577350   \n",
            "1  1.732051 -0.577350 -0.577350 -0.377964 -0.377964 -0.577350  1.732051   \n",
            "2 -0.577350 -0.577350 -0.577350 -0.377964 -0.377964  1.732051 -0.577350   \n",
            "3 -0.577350 -0.577350  1.732051 -0.377964 -0.377964 -0.577350 -0.577350   \n",
            "4 -0.577350  1.732051 -0.577350  2.645751 -0.377964 -0.577350 -0.577350   \n",
            "\n",
            "   director_encoded  actor1_encoded  actor2_encoded  \n",
            "0         -1.803400        0.517455       -1.507557  \n",
            "1         -0.284747       -1.256676       -0.904534  \n",
            "2         -1.044074        1.108832       -0.301511  \n",
            "3         -0.284747       -0.073922        0.301511  \n",
            "4          0.474579        1.700209        0.904534  \n",
            "--------------------------------------------------\n",
            "5. Training the Regression Model (RandomForestRegressor)...\n",
            "Model training complete.\n",
            "--------------------------------------------------\n",
            "6. Evaluating the Model...\n",
            "Mean Absolute Error (MAE): 0.49\n",
            "Mean Squared Error (MSE): 0.24\n",
            "Root Mean Squared Error (RMSE): 0.49\n",
            "R-squared (R2): 0.04\n",
            "--------------------------------------------------\n",
            "7. Making Predictions on New Data...\n",
            "Predicted Rating for a new movie (Action|Thriller, Director X, Actors P, Q): 7.37\n",
            "--------------------------------------------------\n",
            "8. Analyzing Feature Importance...\n",
            "                  importance\n",
            "Sci-Fi              0.276973\n",
            "director_encoded    0.210016\n",
            "actor1_encoded      0.195090\n",
            "Thriller            0.116461\n",
            "actor2_encoded      0.072472\n",
            "Comedy              0.041988\n",
            "Drama               0.033307\n",
            "Action              0.023086\n",
            "Romance             0.015461\n",
            "Family              0.015145\n",
            "--------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder, StandardScaler\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# --- 1. Data Loading (Using Synthetic Data for Demonstration) ---\n",
        "# In a real scenario, you would load your dataset here, e.g., pd.read_csv('movies.csv')\n",
        "print(\"1. Loading Data...\")\n",
        "\n",
        "data = {\n",
        "    'title': ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E', 'Movie F', 'Movie G', 'Movie H', 'Movie I', 'Movie J'],\n",
        "    'genre': ['Action|Thriller', 'Comedy|Romance', 'Drama', 'Action|Sci-Fi', 'Comedy', 'Drama|Romance', 'Thriller', 'Sci-Fi', 'Action', 'Comedy|Family'],\n",
        "    'director': ['Director X', 'Director Y', 'Director X', 'Director Z', 'Director Y', 'Director A', 'Director Z', 'Director B', 'Director X', 'Director Y'],\n",
        "    'actor1': ['Actor P', 'Actor Q', 'Actor R', 'Actor P', 'Actor Q', 'Actor S', 'Actor R', 'Actor T', 'Actor P', 'Actor U'],\n",
        "    'actor2': ['Actor Q', 'Actor R', 'Actor S', 'Actor T', 'Actor U', 'Actor P', 'Actor Q', 'Actor R', 'Actor S', 'Actor T'],\n",
        "    'rating': [7.5, 8.2, 6.9, 9.1, 7.8, 8.5, 6.5, 9.0, 7.2, 8.0]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "print(\"Original Data Head:\")\n",
        "print(df.head())\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 2. Data Preprocessing and Feature Engineering ---\n",
        "print(\"2. Preprocessing Data and Feature Engineering...\")\n",
        "\n",
        "# Handle missing values (for this synthetic data, there are none, but in real data, you'd use strategies like fillna)\n",
        "# df.dropna(inplace=True) # Example\n",
        "\n",
        "# Feature Engineering for 'genre': Multi-hot encoding\n",
        "# Convert genre string into a list of genres\n",
        "df['genre_list'] = df['genre'].apply(lambda x: x.split('|'))\n",
        "mlb = MultiLabelBinarizer()\n",
        "genre_encoded = pd.DataFrame(mlb.fit_transform(df['genre_list']), columns=mlb.classes_, index=df.index)\n",
        "df = pd.concat([df, genre_encoded], axis=1)\n",
        "\n",
        "# Label Encoding for 'director' and 'actors'\n",
        "# This assigns a unique numerical ID to each director/actor.\n",
        "# For director and actors, one-hot encoding might be better for models that don't handle ordinal relationships well,\n",
        "# but for tree-based models like RandomForest, Label Encoding can work.\n",
        "# If you have a very large number of unique directors/actors, one-hot encoding can lead to high dimensionality.\n",
        "director_encoder = LabelEncoder()\n",
        "df['director_encoded'] = director_encoder.fit_transform(df['director'])\n",
        "\n",
        "actor1_encoder = LabelEncoder()\n",
        "df['actor1_encoded'] = actor1_encoder.fit_transform(df['actor1'])\n",
        "\n",
        "actor2_encoder = LabelEncoder()\n",
        "df['actor2_encoded'] = actor2_encoder.fit_transform(df['actor2'])\n",
        "\n",
        "# Drop original categorical columns and the temporary genre_list\n",
        "df_processed = df.drop(['title', 'genre', 'genre_list', 'director', 'actor1', 'actor2'], axis=1)\n",
        "\n",
        "# Define features (X) and target (y)\n",
        "X = df_processed.drop('rating', axis=1)\n",
        "y = df_processed['rating']\n",
        "\n",
        "print(\"Processed Data Head (Features and Target):\")\n",
        "print(X.head())\n",
        "print(y.head())\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 3. Splitting Data into Training and Testing Sets ---\n",
        "print(\"3. Splitting Data into Training and Testing Sets...\")\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(f\"Training features shape: {X_train.shape}\")\n",
        "print(f\"Testing features shape: {X_test.shape}\")\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 4. Feature Scaling (Optional but good practice for some models) ---\n",
        "# StandardScaler scales features to have a mean of 0 and a standard deviation of 1.\n",
        "# For tree-based models like RandomForest, scaling is often not strictly necessary but can sometimes help.\n",
        "# For linear models (e.g., LinearRegression, SVR), it's often crucial.\n",
        "print(\"4. Scaling Features (if necessary)...\")\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# Convert scaled arrays back to DataFrames for easier inspection (optional)\n",
        "X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X_train.columns)\n",
        "X_test_scaled_df = pd.DataFrame(X_test_scaled, columns=X_test.columns)\n",
        "\n",
        "print(\"Scaled Training Features Head:\")\n",
        "print(X_train_scaled_df.head())\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 5. Model Training ---\n",
        "print(\"5. Training the Regression Model (RandomForestRegressor)...\")\n",
        "# Using RandomForestRegressor as it's robust and generally performs well on various datasets.\n",
        "# You could experiment with other models like LinearRegression, SVR, GradientBoostingRegressor.\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X_train_scaled, y_train)\n",
        "\n",
        "print(\"Model training complete.\")\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 6. Model Evaluation ---\n",
        "print(\"6. Evaluating the Model...\")\n",
        "y_pred = model.predict(X_test_scaled)\n",
        "\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\n",
        "print(f\"R-squared (R2): {r2:.2f}\")\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 7. Making Predictions (Example) ---\n",
        "print(\"7. Making Predictions on New Data...\")\n",
        "\n",
        "# Create a sample new movie for prediction\n",
        "new_movie_data = {\n",
        "    'genre': ['Action|Thriller'],\n",
        "    'director': ['Director X'],\n",
        "    'actor1': ['Actor P'],\n",
        "    'actor2': ['Actor Q']\n",
        "}\n",
        "new_movie_df = pd.DataFrame(new_movie_data)\n",
        "\n",
        "# Preprocess the new movie data similar to training data\n",
        "# Genre encoding\n",
        "new_movie_df['genre_list'] = new_movie_df['genre'].apply(lambda x: x.split('|'))\n",
        "new_genre_encoded = pd.DataFrame(mlb.transform(new_movie_df['genre_list']), columns=mlb.classes_, index=new_movie_df.index)\n",
        "new_movie_df = pd.concat([new_movie_df, new_genre_encoded], axis=1)\n",
        "\n",
        "# Director and Actor encoding (use the *fitted* encoders)\n",
        "# Handle potential new categories not seen during training by setting a default value (e.g., -1 or mean of existing)\n",
        "# For simplicity, we assume new data contains known categories or handle errors if not.\n",
        "try:\n",
        "    new_movie_df['director_encoded'] = director_encoder.transform(new_movie_df['director'])\n",
        "except ValueError:\n",
        "    new_movie_df['director_encoded'] = -1 # Or a more robust strategy\n",
        "\n",
        "try:\n",
        "    new_movie_df['actor1_encoded'] = actor1_encoder.transform(new_movie_df['actor1'])\n",
        "except ValueError:\n",
        "    new_movie_df['actor1_encoded'] = -1\n",
        "\n",
        "try:\n",
        "    new_movie_df['actor2_encoded'] = actor2_encoder.transform(new_movie_df['actor2'])\n",
        "except ValueError:\n",
        "    new_movie_df['actor2_encoded'] = -1\n",
        "\n",
        "\n",
        "# Select and reorder columns to match the training data features (X.columns)\n",
        "# This is crucial for consistent prediction\n",
        "new_movie_processed = new_movie_df[['Action', 'Comedy', 'Drama', 'Family', 'Romance', 'Sci-Fi', 'Thriller',\n",
        "                                      'director_encoded', 'actor1_encoded', 'actor2_encoded']]\n",
        "\n",
        "# Scale the new movie features\n",
        "new_movie_scaled = scaler.transform(new_movie_processed)\n",
        "\n",
        "# Predict the rating\n",
        "predicted_rating = model.predict(new_movie_scaled)\n",
        "\n",
        "print(f\"Predicted Rating for a new movie (Action|Thriller, Director X, Actors P, Q): {predicted_rating[0]:.2f}\")\n",
        "print(\"-\" * 50)\n",
        "\n",
        "# --- 8. Feature Importance (for tree-based models) ---\n",
        "print(\"8. Analyzing Feature Importance...\")\n",
        "feature_importances = pd.DataFrame(model.feature_importances_,\n",
        "                                   index = X_train.columns,\n",
        "                                   columns=['importance']).sort_values('importance', ascending=False)\n",
        "print(feature_importances)\n",
        "print(\"-\" * 50)\n"
      ]
    }
  ]
}